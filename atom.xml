<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shesong.org/"/>
  <updated>2017-02-21T06:21:10.816Z</updated>
  <id>http://www.shesong.org/</id>
  
  <author>
    <name>She Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A MapReduce Algorithm for Matrix-Vector Multiplication</title>
    <link href="http://www.shesong.org/2016/10/17/A-MapReduce-Algorithm-for-Matrix-Vector-Multiplication/"/>
    <id>http://www.shesong.org/2016/10/17/A-MapReduce-Algorithm-for-Matrix-Vector-Multiplication/</id>
    <published>2016-10-17T01:35:24.000Z</published>
    <updated>2017-02-21T06:21:10.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题定义">问题定义</h3>
<p>假设有矩阵 <span class="math inline">\(\mathcal{A}=(a_{i,k})\in\mathbb{R}^{I\times K}\)</span>，其中 <span class="math inline">\(i\in[0,I),k\in[0,K)\)</span>，向量 <span class="math inline">\(\mathcal{B}=(b_{k,0})\in\mathbb{R}^{K\times 1}\)</span>，其中 <span class="math inline">\(k\in[0,K)\)</span>。我们作矩阵乘向量运算，可得向量 <span class="math inline">\(\mathcal{C}=\mathcal{A}\mathcal{B}=(c_{i,0})\in\mathbb{R}^{I\times 1}\)</span>，其中 <span class="math inline">\(c_{i,0}=\sum\limits_{k=0}^{K-1}a_{i,k}b_{k,0}\)</span>。当矩阵大到一定程度时，一台服务器由于内存限制已经无法处理。在此我们考虑基于分块的大矩阵乘法，并在Hadoop平台上实现该算法。</p>
<p>我们将 <span class="math inline">\(\mathcal{A}\)</span> 和 <span class="math inline">\(\mathcal{B}\)</span> 划分为足够小的块（子矩阵），使得 <span class="math inline">\(\mathcal{A}\)</span> 和 <span class="math inline">\(\mathcal{B}\)</span> 的小块可以在集群中的单个节点上的内存中相乘。设 <span class="math inline">\(IB\)</span> 表示分块后每个 <span class="math inline">\(\mathcal{A}\)</span> 块和 <span class="math inline">\(\mathcal{C}\)</span> 块的行数，<span class="math inline">\(KB\)</span> 表示每个 <span class="math inline">\(\mathcal{A}\)</span> 块的列数和 <span class="math inline">\(\mathcal{B}\)</span> 块的行数，<span class="math inline">\(NIB\)</span> 表示 <span class="math inline">\(\mathcal{A}\)</span> 行和 <span class="math inline">\(\mathcal{C}\)</span> 行的划分数，即 <span class="math inline">\(NIB=\frac{I-1}{IB}+1\)</span>，<span class="math inline">\(NKB\)</span> 表示 <span class="math inline">\(\mathcal{A}\)</span> 列和 <span class="math inline">\(\mathcal{B}\)</span> 行的划分数，即 <span class="math inline">\(NKB=\frac{K-1}{KB}+1\)</span>。</p>
<hr>
<h3 id="示例">示例</h3>
<p>矩阵 <span class="math inline">\(\mathcal{A}=\left[\begin{array}{cc|cc}a_{00} &amp; a_{01} &amp; a_{02} &amp; a_{03}\\a_{10} &amp; a_{11} &amp; a_{12} &amp; a_{13}\\\hline a_{20} &amp; a_{21} &amp; a_{22} &amp; a_{23}\\a_{30} &amp; a_{31} &amp; a_{32} &amp; a_{33}\\\hline a_{40} &amp; a_{41} &amp; a_{42} &amp; a_{43}\\a_{50} &amp; a_{51} &amp; a_{52} &amp; a_{53}\\\end{array}\right]\)</span> 被分成 <span class="math inline">\(3\times 2\)</span> 个块，记为 <span class="math inline">\(\mathcal{A}=\left[\begin{array}{cc}\mathbf{A}_{00} &amp; \mathbf{A}_{01}\\\mathbf{A}_{10} &amp; \mathbf{A}_{11}\\\mathbf{A}_{20} &amp; \mathbf{A}_{21}\\\end{array}\right]\)</span>。</p>
<p>向量 <span class="math inline">\(\mathcal{B}=\left[\begin{array}{c}b_{00}\\b_{10}\\\hline b_{20}\\b_{30}\end{array}\right]\)</span> 被分为 <span class="math inline">\(2\times 1\)</span> 个块，记为 <span class="math inline">\(\mathcal{B}=\left[\begin{array}{c}\mathbf{B}_{00}\\\mathbf{B}_{10}\end{array}\right]\)</span>。</p>
<p>则矩阵 <span class="math inline">\(\mathcal{C}=\mathcal{A}\mathcal{B}=\left[\begin{array}{c}\mathbf{C}_{00}\\\mathbf{C}_{10}\\\mathbf{C}_{20}\end{array}\right]=\left[\begin{array}{c}\mathbf{A}_{00}\mathbf{B}_{00}\\\mathbf{A}_{10}\mathbf{B}_{00}\\\mathbf{A}_{20}\mathbf{B}_{00}\end{array}\right]+\left[\begin{array}{c}\mathbf{A}_{01}\mathbf{B}_{10}\\\mathbf{A}_{11}\mathbf{B}_{10}\\\mathbf{A}_{21}\mathbf{B}_{10}\end{array}\right]=\left[\begin{array}{c}\mathbf{A}_{00}\mathbf{B}_{00}+\mathbf{A}_{01}\mathbf{B}_{10}\\\mathbf{A}_{10}\mathbf{B}_{00}+\mathbf{A}_{11}\mathbf{B}_{10}\\\mathbf{A}_{20}\mathbf{B}_{00}+\mathbf{A}_{21}\mathbf{B}_{10}\end{array}\right]\)</span>，此时 <span class="math inline">\(I=6,K=4,IB=2,KB=2,NIB=3,NKB=2\)</span>。</p>
<p>我们令 <span class="math inline">\(0\leq ib&lt;NIB\)</span> 和 <span class="math inline">\(0\leq kb&lt;NKB\)</span> 表示某个块的下标，如当 <span class="math inline">\(ib=1,\,kb=1\)</span> 时，则 <span class="math inline">\(\mathbf{A}_{ib,kb}=\left[\begin{array}{cc}a_{22} &amp; a_{23}\\a_{32} &amp; a_{33}\end{array}\right]\)</span>，<span class="math inline">\(\mathbf{B}_{kb,0}=\left[\begin{array}{c}b_{20}\\b_{30}\end{array}\right]\)</span>。</p>
<hr>
<h3 id="在mapreduce上实现分块算法">在MapReduce上实现分块算法</h3>
<p>我们只用一个MapRedcue阶段来实现算法。Mappper负责读取数据，并按照分块的策略发送分块，注意的是矩阵和向量分别存储于两个不同的输入路径且同时作为Mapper的输入数据。每个Reducers接收到Mapper发送的分块后，根据分块算法计算对应分块乘积的结果。例如，Reducer接收到块 <span class="math inline">\(\mathbf{A}_{ib,kb}\)</span> 和 <span class="math inline">\(\mathbf{B}_{kb,0}\)</span>，其中 <span class="math inline">\(0\leq kb&lt; NKB\)</span>，并按以下顺序重新组织：<span class="math display">\[\begin{align}\mathbf{A}_{ib,0}\,\,\mathbf{B}_{0,0}\,\,\mathbf{A}_{ib,1}\,\,\mathbf{B}_{1,0}\,\,\cdots \mathbf{A}_{ib,NKB-1}\,\,\mathbf{B}_{NKB-1,0}\end{align}\]</span> Reducer将每两个块 <span class="math inline">\(\mathbf{A}\)</span> 和 <span class="math inline">\(\mathbf{B}\)</span> 相乘并累加结果，即 <span class="math inline">\(\sum\limits_{kb=0}^{KB-1}\mathbf{A}_{ib,kb}\mathbf{B}_{kb,0}\)</span>。</p>
<hr>
<h3 id="算法分析">算法分析</h3>
<p>考虑最糟糕的情形，若矩阵 <span class="math inline">\(\mathcal{A}\)</span> 是稠密的而且无0元素，Mapper需要发送 <span class="math inline">\(I\times K\)</span> 个中间对。同理对于向量 <span class="math inline">\(\mathcal{B}\)</span>，Mapper需要发送 <span class="math inline">\(NIB\times K\)</span> 个中间对。即在最坏的情况下，会有 <span class="math inline">\(K\times (I+NIB)\)</span> 个中间对在sorf和shuffle阶段传输。</p>
<hr>
<h3 id="伪代码">伪代码</h3>
<div class="figure">
<img src="https://ooo.0o0.ooo/2017/02/21/58ab9b4b72b77.png" alt="Mapper.png">
<p class="caption">Mapper.png</p>
</div>
<p>注意到Mapper发送的key是个复合key，它由3个元素组成，分别是 <span class="math inline">\((ib,\, kb,\, m)\)</span>，其中 <span class="math inline">\(ib\)</span> 和 <span class="math inline">\(kb\)</span> 分别表示块中元素的行、列下标，而 <span class="math inline">\(m=0\)</span> 表示数据来自矩阵 <span class="math inline">\(\mathcal{A}\)</span>，<span class="math inline">\(m=1\)</span> 来自向量 <span class="math inline">\(\mathcal{B}\)</span>。</p>
<p>在sort和shuffle阶段，复合key必须有序，如按升序则先排 <span class="math inline">\(ib\)</span>，然后 <span class="math inline">\(kb\)</span>，最后 <span class="math inline">\(m\)</span>。同时，Partitioner需按等式 <span class="math inline">\(r=ib\pmod R\)</span> 来将中间对分发到各个Reducer中（<span class="math inline">\(R\)</span> 是Reducer的个数）。以上排序和划分复合key保证了每个Reducer都依据公式（1）接收到对应的 <span class="math inline">\(\mathbf{A}\)</span> 块和 <span class="math inline">\(\mathbf{B}\)</span> 块的数据。</p>
<div class="figure">
<img src="https://ooo.0o0.ooo/2017/02/21/58ab9b4b741c9.png" alt="Redcuer.png">
<p class="caption">Redcuer.png</p>
</div>
<p>注意在Reducer阶段，我们只需要为矩阵 <span class="math inline">\(\mathcal{A}\)</span> 和向量 <span class="math inline">\(\mathcal{C}\)</span> 开辟内存空间。</p>
<hr>
<h3 id="源代码">源代码</h3>
<p>相关代码可参考 <a href="https://github.com/francize/Matrix-Vector-Multiplication" class="uri" target="_blank" rel="external">https://github.com/francize/Matrix-Vector-Multiplication</a>。</p>
<hr>
<h3 id="参考">参考</h3>
<ol style="list-style-type: decimal">
<li><a href="http://www.norstad.org/matrix-multiply/" class="uri" target="_blank" rel="external">http://www.norstad.org/matrix-multiply/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Block_matrix" class="uri" target="_blank" rel="external">https://en.wikipedia.org/wiki/Block_matrix</a></li>
<li><a href="https://vangjee.wordpress.com/2012/03/30/implementing-rawcomparator-will-speed-up-your-hadoop-mapreduce-mr-jobs-2/" target="_blank" rel="external">关于实现rawcomparator</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题定义&quot;&gt;问题定义&lt;/h3&gt;
&lt;p&gt;假设有矩阵 &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{A}=(a_{i,k})\in\mathbb{R}^{I\times K}\)&lt;/span&gt;，其中 &lt;span class=&quot;math i
    
    </summary>
    
      <category term="Distributed Computing" scheme="http://www.shesong.org/categories/Distributed-Computing/"/>
    
    
      <category term="MapReduce" scheme="http://www.shesong.org/tags/MapReduce/"/>
    
      <category term="Matrix Multiplication" scheme="http://www.shesong.org/tags/Matrix-Multiplication/"/>
    
  </entry>
  
</feed>
