<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shesong.org/"/>
  <updated>2017-02-16T06:36:27.438Z</updated>
  <id>http://www.shesong.org/</id>
  
  <author>
    <name>She Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.shesong.org/2017/02/17/hello-world/"/>
    <id>http://www.shesong.org/2017/02/17/hello-world/</id>
    <published>2017-02-17T13:51:09.209Z</published>
    <updated>2017-02-16T06:36:27.438Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<p><span class="math display">\[ 5050=\sum_{i=1}^{100} i \]</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="Test" scheme="http://www.shesong.org/categories/Test/"/>
    
    
      <category term="tag1" scheme="http://www.shesong.org/tags/tag1/"/>
    
      <category term="tag2" scheme="http://www.shesong.org/tags/tag2/"/>
    
  </entry>
  
  <entry>
    <title>A MapReduce Algorithm for Matrix-Vector Multiplication</title>
    <link href="http://www.shesong.org/2016/10/17/A-MapReduce-Algorithm-for-Matrix-Vector-Multiplication/"/>
    <id>http://www.shesong.org/2016/10/17/A-MapReduce-Algorithm-for-Matrix-Vector-Multiplication/</id>
    <published>2016-10-17T01:35:24.000Z</published>
    <updated>2017-02-21T02:08:55.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h3><p>假设有矩阵 $\mathcal{A}=(a_{i,k})\in\mathbb{R}^{I\times K}$，其中 $i\in[0,I),k\in[0,K)$，向量 $\mathcal{B}=(b_{k,0})\in\mathbb{R}^{K\times 1}$，其中 $k\in[0,K)$。我们作矩阵乘向量运算，可得向量 $\mathcal{C}=\mathcal{A}\mathcal{B}=(c_{i,0})\in\mathbb{R}^{I\times 1}$，其中 $c_{i,0}=\sum\limits_{k=0}^{K-1}a_{i,k}b_{k,0}$。当矩阵大到一定程度时，一台服务器由于内存限制已经无法处理。在此我们考虑基于分块的大矩阵乘法，并在Hadoop平台上实现该算法。</p>
<p>我们将 $\mathcal{A}$ 和 $\mathcal{B}$ 划分为足够小的块（子矩阵），使得 $\mathcal{A}$ 和 $\mathcal{B}$ 的小块可以在集群中的单个节点上的内存中相乘。设 $IB$ 表示分块后每个 $\mathcal{A}$ 块和 $\mathcal{C}$ 块的行数，$KB$ 表示每个 $\mathcal{A}$ 块的列数和 $\mathcal{B}$ 块的行数，$NIB$ 表示 $\mathcal{A}$ 行和 $\mathcal{C}$ 行的划分数，即 $NIB=\frac{I-1}{IB}+1$，$NKB$ 表示 $\mathcal{A}$ 列和 $\mathcal{B}$ 行的划分数，即 $NKB=\frac{K-1}{KB}+1$。</p>
<hr>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>矩阵 $\mathcal{A}=\left[\begin{array}{cc|cc}a_{00} &amp; a_{01} &amp; a_{02} &amp; a_{03}\\a_{10} &amp; a_{11} &amp; a_{12} &amp; a_{13}\\\hline a_{20} &amp; a_{21} &amp; a_{22} &amp; a_{23}\\a_{30} &amp; a_{31} &amp; a_{32} &amp; a_{33}\\\hline a_{40} &amp; a_{41} &amp; a_{42} &amp; a_{43}\\a_{50} &amp; a_{51} &amp; a_{52} &amp; a_{53}\\\end{array}\right]$ 被分成 $3\times 2$ 个块，记为 $\mathcal{A}=\left[\begin{array}{cc}\mathbf{A}_{00} &amp; \mathbf{A}_{01}\\\mathbf{A}_{10} &amp; \mathbf{A}_{11}\\\mathbf{A}_{20} &amp; \mathbf{A}_{21}\\\end{array}\right]$。</p>
<p>向量 $\mathcal{B}=\left[\begin{array}{c}b_{00}\\b_{10}\\\hline b_{20}\\b_{30}\end{array}\right]$ 被分为 $2\times 1$ 个块，记为 $\mathcal{B}=\left[\begin{array}{c}\mathbf{B}_{00}\\\mathbf{B}_{10}\end{array}\right]$。</p>
<p>则矩阵 $\mathcal{C}=\mathcal{A}\mathcal{B}=\left[\begin{array}{c}\mathbf{C}_{00}\\\mathbf{C}_{10}\\\mathbf{C}_{20}\end{array}\right]=\left[\begin{array}{c}\mathbf{A}_{00}\mathbf{B}_{00}\\\mathbf{A}_{10}\mathbf{B}_{00}\\\mathbf{A}_{20}\mathbf{B}_{00}\end{array}\right]+\left[\begin{array}{c}\mathbf{A}_{01}\mathbf{B}_{10}\\\mathbf{A}_{11}\mathbf{B}_{10}\\\mathbf{A}_{21}\mathbf{B}_{10}\end{array}\right]=\left[\begin{array}{c}\mathbf{A}_{00}\mathbf{B}_{00}+\mathbf{A}_{01}\mathbf{B}_{10}\\\mathbf{A}_{10}\mathbf{B}_{00}+\mathbf{A}_{11}\mathbf{B}_{10}\\\mathbf{A}_{20}\mathbf{B}_{00}+\mathbf{A}_{21}\mathbf{B}_{10}\end{array}\right]$，此时 $I=6,K=4,IB=2,KB=2,NIB=3,NKB=2$。</p>
<p>我们令 $0\leq ib&lt;NIB$ 和 $0\leq kb&lt;NKB$ 表示某个块的下标，如当 $ib=1,\,kb=1$ 时，则 $\mathbf{A}_{ib,kb}=\left[\begin{array}{cc}a_{22} &amp; a_{23}\\a_{32} &amp; a_{33}\end{array}\right]$，$\mathbf{B}_{kb,0}=\left[\begin{array}{c}b_{20}\\b_{30}\end{array}\right]$。</p>
<hr>
<h3 id="在MapReduce上实现分块算法"><a href="#在MapReduce上实现分块算法" class="headerlink" title="在MapReduce上实现分块算法"></a>在MapReduce上实现分块算法</h3><p>我们只用一个MapRedcue阶段来实现算法。Mappper负责读取数据，并按照分块的策略发送分块，注意的是矩阵和向量分别存储于两个不同的输入路径且同时作为Mapper的输入数据。每个Reducers接收到Mapper发送的分块后，根据分块算法计算对应分块乘积的结果。例如，Reducer接收到块 $\mathbf{A}_{ib,kb}$ 和 $\mathbf{B}_{kb,0}$，其中 $0\leq kb&lt; NKB$，并按以下顺序重新组织：$$\begin{align}\mathbf{A}_{ib,0}\,\,\mathbf{B}_{0,0}\,\,\mathbf{A}_{ib,1}\,\,\mathbf{B}_{1,0}\,\,\cdots \mathbf{A}_{ib,NKB-1}\,\,\mathbf{B}_{NKB-1,0}\end{align}$$<br>Reducer将每两个块 $\mathbf{A}$ 和 $\mathbf{B}$ 相乘并累加结果，即 $\sum\limits_{kb=0}^{KB-1}\mathbf{A}_{ib,kb}\mathbf{B}_{kb,0}$。</p>
<hr>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>考虑最糟糕的情形，若矩阵 $\mathcal{A}$ 是稠密的而且无0元素，Mapper需要发送 $I<em>K$ 个中间对。同理对于向量 $\mathcal{B}$，Mapper需要发送 $NIB</em>K$ 个中间对。即在最坏的情况下，会有 $K*(I+NIB)$ 个中间对在sorf和shuffle阶段传输。</p>
<hr>
<h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p><img src="https://ooo.0o0.ooo/2017/02/21/58ab9b4b72b77.png" alt="Mapper.png"></p>
<p>注意到Mapper发送的key是个复合key，它由3个元素组成，分别是 $(ib,\, kb,\, m)$，其中 $ib$ 和 $kb$ 分别表示块中元素的行、列下标，而 $m=0$ 表示数据来自矩阵 $\mathcal{A}$，$m=1$ 来自向量 $\mathcal{B}$。 </p>
<p>在sort和shuffle阶段，复合key必须有序，如按升序则先排 $ib$，然后 $kb$，最后 $m$。同时，Partitioner需按等式 $r=ib\pmod R$ 来将中间对分发到各个Reducer中（$R$ 是Reducer的个数）。以上排序和划分复合key保证了每个Reducer都依据公式（1）接收到对应的 $\mathbf{A}$ 块和 $\mathbf{B}$ 块的数据。</p>
<p><img src="https://ooo.0o0.ooo/2017/02/21/58ab9b4b741c9.png" alt="Redcuer.png"></p>
<p>注意在Reducer阶段，我们只需要为矩阵 $\mathcal{A}$ 和向量 $\mathcal{C}$ 开辟内存空间。</p>
<hr>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题定义&quot;&gt;&lt;a href=&quot;#问题定义&quot; class=&quot;headerlink&quot; title=&quot;问题定义&quot;&gt;&lt;/a&gt;问题定义&lt;/h3&gt;&lt;p&gt;假设有矩阵 $\mathcal{A}=(a_{i,k})\in\mathbb{R}^{I\times K}$，其中 $i\i
    
    </summary>
    
      <category term="Distributed Computing" scheme="http://www.shesong.org/categories/Distributed-Computing/"/>
    
    
      <category term="MapReduce" scheme="http://www.shesong.org/tags/MapReduce/"/>
    
      <category term="Matrix Multiplication" scheme="http://www.shesong.org/tags/Matrix-Multiplication/"/>
    
  </entry>
  
</feed>
